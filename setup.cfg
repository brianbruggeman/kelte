[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[metadata]
name = kelte
license_file = LICENSE
description_file = README.md

[build_sphinx]
source_dir = docs
build_dir = docs/_build
all_files = 1

[upload_sphinx]
upload-dir = docs/_build/html
all_files = 1

[upload_doc]
upload-dir = docs/_build/html
all_files = 1

[pbr]
# Let pbr run sphinx-apidoc
autodoc_tree_index_modules = True

[coverage:run]
branch = True
omit =
    setup.py
    */__*.py
    tests/*
source =
    kelte

[coverage:html]
directory = docs/_build/html/

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    def __dir__
    if __name__ == .__main__.:

[tool:pytest]
timeout = 300
testpaths = tests
addopts =
    # ----- Reporting -----
    # stdout
    -s
    # Reduce spam
    -p no:logging
    # ----- Coverage -----
    # Package path(s) to cover
    --cov=kelte
    # Append coverage to existing coverage data
    --cov-append
    # Display missing lines on coverage report output
    --cov-report=term-missing
    # Fail coverage test if coverage is below % value
    # 100% should be required if you have production critical
    # 80% should be enough to cover most cases
    # 40% is enough for beta
    # 25% is enough for a working prototype
    --cov-fail-under=25
    # ----- Style -----
    # Check for correctly sorted imports
    --isort
    # Run flake8 on code
    --flake8
    # ---- Performance ----
    # Uses pytest-xdist and automatically decides how many cores to employ
    # YMMV: for very fast tests, it takes longer to setup the multi-core
    #       tests.  For larger projects, though, this can significantly
    #       reduce time.  isort and flake8 can really expand time, and
    #       this setting alone can cut test time in half.
    # -n auto
norecursedirs = .git load dist* *.egg-info provision
looponfailroots = kelte tests

[flake8]
jobs = 8
ignore =
    E121,
    E123,
    E126,
    E501,
    F812,
    W503,
exclude =
    setup.py,
    tests,
    doc,
    .git,
    load,
    dist,
    __pycache__,


[isort]
line_length = 140
indent = '    '
multi_line_output = 3
length_sort = False
combine_star = True
not_skip = __init__.py
known_standard_library = dataclasses
known_first_party = kelte
